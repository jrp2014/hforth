\ preForth runtime system - machine independent part

\ ------------------------------------
\ define lots of useful standard words
\ ------------------------------------

: ?dup ( x -- x x | 0 )
    dup dup ?exit drop ;
    
: 0= ( x -- flag )
   0 swap ?exit drop -1 ;

: negate ( n1 -- n2 )
    0 swap - ;

: + ( x1 x2 -- x3 )
    negate - ;

: 1+ ( n1 -- n2 )
   1 + ;

: 1- ( n1 -- n2 )
   1 - ;

: = ( x1 x2 -- flag )
   - 0= ;

: < ( n1 n2 -- flag )
   - 0< ;

: > ( n1 n2 -- flag )
   swap < ;


\ additional stack operators
\ --------------------------

\ Already a primitive
\ : over ( x1 x2 -- x1 x2 x1 )
\    >r dup r> swap ;

\ Already a primitive
\ : rot ( x1 x2 x3 -- x2 x3 x1 )
\    >r swap r> swap ;

: nip ( x1 x2 -- x2 )
   swap drop ;

: 2drop ( x1 x2 -- )
   drop drop ;

\ Already a primitive
\ : pick ( xn-1 ... x0 i -- xn-1 ... x0 xi )
\     over swap ?dup 0= ?exit nip swap >r 1- pick r> swap ;  

: roll ( xn-1 ... x0 i -- xn-1 ... xi-1 xi+1 ... x0 xi )
    ?dup 0= ?exit swap >r 1- roll r> swap ;



\ case? compares the value x to y. If they match, return true. If not keep x and return false.
: case? ( x y -- tf | x ff )
    over = dup 0= ?exit  2drop -1 ; 

\ text output words
\ -----------------

: bl ( -- bl )
   32 ;

: space ( -- )
   bl emit ;

: tab ( -- )
    9 emit ;

: cr ( -- )
   10 emit ;


\ number output
\ -------------

: (/mod  ( n d q0 -- r d q )
   >r over over <  r> swap ?exit
   >r swap over -  swap  r> 1+  (/mod ;

: 10* ( x1 -- x2 )
    dup + dup dup + dup + + ;

: (10u/mod ( n q d -- r q d )
   2 pick over > 0= ?exit     \ ( n q d )
   dup >r 10*                 \ ( n q 10*d ) ( R: d )
   (10u/mod                   \ ( r q d )
   swap >r   0 (/mod nip   r> 10* + r> ;
     
: 10u/mod ( n -- r q )
   0 1 (10u/mod drop  ;

: (u. ( u1 -- )
   ?dup 0= ?exit 10u/mod (u. '0' + emit ;

\ display unsigned number
: u. ( u -- )
   dup (u. ?exit '0' emit ;


: (. ( n -- n' )
   dup 0< 0= ?exit '-' emit negate ;

\ display signed number
: dec. ( n -- )
   (. u. ;


\ -----------
\ strings
\ -----------
\ Strings are represented as character stack elements with a count on top
\ They convieniently be processed using recursion.
\ Idioms:  dup pick   gets 1st character
\          dup        gets length
\          x swap 1+  adds x to end of string
\          nip 1-     removes last character
\
\ Useful words
\ show   displays trings
\ _dup   duplicates topmost string
\ _drop  removes topmost string
\ _swap  exchanges two topmost strings

\ show displays topmost string
: show ( S -- )
   ?dup 0= ?exit  swap >r 1- show r> emit ;

\ tail call optimization primitive (noop, in our case)
: tail ;

: (_dup ( S m n -- S S )
    ?dup 0= ?exit  over 2 + pick rot rot  1-   tail (_dup ;

\ _dup duplicated topmost string
: _dup ( S -- S S )
    dup dup (_dup ;

\ _drop removes topmost string
: _drop ( S -- )
    ?dup 0= ?exit nip 1- _drop ;


: (_swap ( S1 S2 x1 x2 -- S2 S1 x1 0 )
    dup 0= ?exit over 3 + roll rot rot 1- (_swap ;

\ _swap exchanges two topmost strings
: _swap ( S1 S2 -- S2 S1 )
    dup >r pick r> dup >r  over >r + r> r> rot rot 1+ (_swap 2drop ;

